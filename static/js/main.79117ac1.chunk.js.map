{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","CANDY_COLORS","BlueCandy","GreenCandy","OrangeCandy","PurpleCandy","RedCandy","YellowCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squaredBeingDragged","setSquaredBeingDragged","squaredBeingReplaced","setSquaredBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfThree","useCallback","i","columnOfThree","WIDTH","decidedColor","isBlank","blank","every","square","prevState","forEach","checkForRowOfThree","rowOfThree","includes","checkForColumnOfFour","columnOfFour","checkForRowOfFour","rowOfFour","moveIntoSquareBelow","randomNumberFrom0To5","Math","floor","random","length","squareBelow","dragStart","e","target","dragDrop","dragEnd","squareBeingReplacedId","parseInt","getAttribute","squareBeingDraggedId","isValidMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragOver","preventDefault","onDragEnter","onDragLeave","onDragStart","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79117ac1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function ScoreBoard({ score }) {\r\n  return (\r\n    <div className='score-board'>\r\n      <h2>Your current score is:{score}</h2>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import { useState, useEffect, useCallback } from 'react'\n\nimport ScoreBoard from './components/ScoreBoard'\nimport BlueCandy from './images/blue-candy.png'\nimport GreenCandy from './images/green-candy.png'\nimport OrangeCandy from './images/orange-candy.png'\nimport PurpleCandy from './images/purple-candy.png'\nimport RedCandy from './images/red-candy.png'\nimport YellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst WIDTH = 8\n\nconst CANDY_COLORS = [BlueCandy, GreenCandy, OrangeCandy, PurpleCandy, RedCandy, YellowCandy]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n\n  const [squaredBeingDragged, setSquaredBeingDragged] = useState(null)\n\n  const [squaredBeingReplaced, setSquaredBeingReplaced] = useState(null)\n\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n\n  const checkForColumnOfThree = useCallback(\n    () => {\n      for (let i = 0; i <= 47; i++) {\n        const columnOfThree = [i, i + WIDTH, i + WIDTH * 2]\n\n        const decidedColor = currentColorArrangement[i]\n\n        const isBlank = currentColorArrangement[i] === blank\n\n        if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n          setScoreDisplay((prevState) => prevState + 3)\n          columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n          return true\n        }\n      }\n    },\n    [currentColorArrangement],\n  )\n\n  const checkForRowOfThree = useCallback(\n    () => {\n      for (let i = 0; i < 64; i++) {\n        const rowOfThree = [i, i + 1, i + 2]\n\n        const decidedColor = currentColorArrangement[i]\n\n        const isBlank = currentColorArrangement[i] === blank\n\n        const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n        if (notValid.includes(i)) continue\n\n        if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n          setScoreDisplay((prevState) => prevState + 3)\n          rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n          return true\n        }\n      }\n    },\n    [currentColorArrangement],\n  )\n\n  const checkForColumnOfFour = useCallback(\n    () => {\n      for (let i = 0; i <= 39; i++) {\n        const columnOfFour = [i, i + WIDTH, i + WIDTH * 2, i + WIDTH * 3]\n\n        const decidedColor = currentColorArrangement[i]\n\n        const isBlank = currentColorArrangement[i] === blank\n\n        if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n          setScoreDisplay((prevState) => prevState + 4)\n          columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n          return true\n        }\n      }\n    },\n    [currentColorArrangement],\n  )\n\n  const checkForRowOfFour = useCallback(\n    () => {\n      for (let i = 0; i < 64; i++) {\n        const rowOfFour = [i, i + 1, i + 2, i + 3]\n\n        const decidedColor = currentColorArrangement[i]\n\n        const isBlank = currentColorArrangement[i] === blank\n\n        const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n        if (notValid.includes(i)) continue\n\n        if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n          setScoreDisplay((prevState) => prevState + 4)\n          rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n          return true\n        }\n      }\n    },\n    [currentColorArrangement],\n  )\n\n  const moveIntoSquareBelow = useCallback(\n    () => {\n      for (let i = 0; i <= 55; i++) {\n        const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n\n        const isFirstRow = firstRow.includes(i)\n\n        if (isFirstRow && currentColorArrangement[i] === blank) {\n          let randomNumberFrom0To5 = Math.floor(Math.random() * CANDY_COLORS.length)\n\n          currentColorArrangement[i] = CANDY_COLORS[randomNumberFrom0To5]\n        }\n\n        const squareBelow = i + WIDTH\n\n        if (currentColorArrangement[squareBelow] === blank) {\n          currentColorArrangement[squareBelow] = currentColorArrangement[i]\n          currentColorArrangement[i] = blank\n        }\n      }\n    }\n    ,\n    [currentColorArrangement],\n  )\n\n  const dragStart = (e) => {\n    setSquaredBeingDragged(e.target)\n  }\n\n  const dragDrop = (e) => {\n    setSquaredBeingReplaced(e.target)\n  }\n\n  const dragEnd = () => {\n    const squareBeingReplacedId = parseInt(squaredBeingReplaced.getAttribute('data-id'))\n\n    const squareBeingDraggedId = parseInt(squaredBeingDragged.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squaredBeingDragged.getAttribute('src')\n\n    currentColorArrangement[squareBeingDraggedId] = squaredBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - WIDTH,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + WIDTH,\n    ]\n\n    const isValidMove = validMoves.includes(squareBeingReplacedId)\n\n    const isAColumnOfFour = checkForColumnOfFour()\n    const isARowOfFour = checkForRowOfFour()\n\n    const isAColumnOfThree = checkForColumnOfThree()\n    const isARowOfThree = checkForRowOfThree()\n\n    if (squareBeingReplacedId && isValidMove && (isAColumnOfFour || isARowOfFour || isAColumnOfThree || isARowOfThree)) {\n      setSquaredBeingDragged(null)\n      setSquaredBeingReplaced(null)\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squaredBeingReplaced.getAttribute('src')\n\n      currentColorArrangement[squareBeingDraggedId] = squaredBeingDragged.getAttribute('src')\n\n      setCurrentColorArrangement([...currentColorArrangement])\n    }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n\n    for (let i = 0; i < WIDTH * WIDTH; i++) {\n      const randomNumberFrom0To5 = Math.floor(Math.random() * CANDY_COLORS.length)\n\n      const randomColor = CANDY_COLORS[randomNumberFrom0To5]\n\n      randomColorArrangement.push(randomColor)\n    }\n\n    setCurrentColorArrangement(randomColorArrangement)\n  }\n\n  useEffect(() => {\n    createBoard()\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 100);\n\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n  return (\n    <div className='app'>\n      <ScoreBoard score={scoreDisplay} />\n\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            src={candyColor}\n            alt={candyColor}\n            key={index}\n            data-id={index}\n            draggable={true}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDragStart={dragStart}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}